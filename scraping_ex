#!/usr/bin/env python3

import re
import sys
from argparse import ArgumentParser as AP


from bs4 import BeautifulSoup

from selenium import webdriver 
from selenium.webdriver.common.by import By 
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support.ui import WebDriverWait 
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support import expected_conditions as EC 
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.firefox.firefox_profile import FirefoxProfile


def get_args():
    parser = AP(description="Gets the latest firmware version from Dells site")
    parser.add_argument(
        "-d",
        "--debug",
        help="Turns on debug mode and loads the driver in the foreground",
        action="store_true"
    )

    return parser.parse_args()


def get_dell(driver, server):
    timeout = 20

    model = dell_model(server['Model'])
    
    url = "https://www.dell.com/support/home/us/en/04/product-support/product/" + model.lower() + "/drivers"
    try:
        driver.get(url)
        
        body = driver.find_element_by_xpath("//option[@label='Support']")
        
        action = ActionChains(driver)
        action.move_to_element(body).perform()
        
        WebDriverWait(driver, timeout).until(
            EC.visibility_of_element_located(
                (By.XPATH, "//select[@id='operating-system']")
            )
        )

        os_sort = driver.find_element_by_xpath("//select[@id='operating-system']")
        os_sort.click()

        WebDriverWait(driver, timeout).until(
            EC.visibility_of_element_located(
                (By.XPATH, "//option[@value='NAA']")
            )
        )

        bios_select = driver.find_element_by_xpath("//option[@value='NAA']")
        bios_select.click()

        WebDriverWait(driver, timeout).until(
            EC.visibility_of_element_located(
                (By.XPATH,"//select[@id='ddl-category']")
            )
        )
        cat_select = driver.find_element_by_xpath("//select[@id='ddl-category']")
        cat_select.click()

        WebDriverWait(driver, timeout).until(
            EC.visibility_of_element_located(
                (By.XPATH,"//option[@value='BI']")
            )
        )
        cat_bios_sel = driver.find_element_by_xpath("//option[@value='BI']")
        cat_bios_sel.click()

        source = BeautifulSoup(driver.page_source, 'html.parser')
    
    except Exception as e:
        print(e)
        driver.quit()
        sys.exit(1)
    
    list_items = source.find_all('td')
    
    ver = re.compile("Version (\d+\.\d+(\.\d+)?)")
    
    for item in list_items:
        match = ver.search(item.text)
        if match:
            server['BIOS'] = match.group(1)

    if not 'BIOS' in server:
        server['BIOS'] = None

    return server


def dell_model(name):
    return name.strip().replace(" ", "-").lower()


def main():
    args = get_args()
    options = Options()
    if args.debug:
        options.headless = False
    else:
        options.headless = True

    profile = FirefoxProfile()
    profile.set_preference("browser.privatebrowsing.autostart", True)
    
    try:
        driver = webdriver.Firefox(firefox_profile=profile, options=options)
    except:
        print("Failed to initiate web driver")
        sys.exit(1)
        
    models = [
        {
            'Model': 'Poweredge R630',
            'Vendor': 'Dell',
        }, 
        {
            'Model': 'Poweredge R330',
            'Vendor': 'Dell',
        }, 
        {
            'Model': 'Poweredge R730',
            'Vendor': 'Dell',
        }, 
        {
            'Model': 'Poweredge R930',
            'Vendor': 'Dell',
        }, 
    ]
    
    out_dat = []

    for model in models:
        if model['Vendor'].lower() == 'dell':
            out_dat.append(get_dell(driver, model))
    
    driver.quit()

    print(out_dat)

if __name__ == '__main__':
    main()
